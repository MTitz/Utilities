#!/usr/bin/python
from os import access, getlogin, R_OK, scandir
from os.path import isdir, isfile, splitext
from subprocess import DEVNULL, Popen, run
from sys import argv, exit

displayRules = {
    "*audio"  : "vlc",
    "*image"  : "nomacs",
    "*office" : "libreoffice --view",
    "*source" : "less",
    "*video"  : "vlc",

    "basic"   : "*source",
    "c"       : "*source",
    "class"   : "%javap",
    "cpp"     : "*source",
    "csh"     : "*source",
    "djvu"    : "evince",
    "docx"    : "*office",
    "dvi"     : "xdvi",
    "eps"     : "evince",
    "f"       : "*source",
    "f77"     : "*source",
    "f90"     : "*source",
    "f95"     : "*source",
    "fig"     : "xfig",
    "fortran" : "*source",
    "gif"     : "*image",
    "h"       : "*source",
    "hpp"     : "*source",
    "htm"     : "lynx",
    "html"    : "lynx",
    "ico"     : "*image",
    "jar"     : "%jar tf",
    "java"    : "*source",
    "jpeg"    : "*image",
    "jpg"     : "*image",
    "js"      : "*source",
    "mov"     : "*video",
    "mp3"     : "*audio",
    "mp4"     : "*video",
    "mpeg"    : "*audio",
    "odt"     : "*office",
    "ogg"     : "*audio",
    "pas"     : "*source",
    "pdf"     : "evince",
    "pgn"     : "scid",
    "pl"      : "*source",
    "png"     : "*image",
    "ppt"     : "*office",
    "ps"      : "evince",
    "py"      : "*source",
    "rar"     : "%rar l",
    "sh"      : "*source",
    "svg"     : "*image",
    "tar"     : "%tar tvf",
    "tgz"     : "%tar tvzf",
    "ts"      : "*source",
    "txt"     : "vf",
    "webp"    : "*image",
    "wma"     : "*audio",
    "wmv"     : "*video",
    "xls"     : "*office",
    "xlsx"    : "*office",
    "zip"     : "%unzip -l" }

terminalApps = { "javap", "jar", "less", "ls", "lynx", "rar", "tar", "unzip", "vf" }


def is_textfile(filename):
    """
    Determines if the given file is a text file by invoking the 'file' command.

    Args:
        filename (str): The path to the file to check.

    Returns:
        bool: True if the file is identified as a text file, False otherwise.
    """
    file_result = run(["file", "-L", filename], capture_output=True)
    if (file_result.returncode != 0):
        return False
    output = file_result.stdout.decode()
    if ':' not in output:
        return False
    return "text" in output.rsplit(':', 1)[1]

def display_file(command, filename):
    args = command.split()
    args.append(filename)
    if args[0] in terminalApps:
        run(args)
    else:
        Popen(args, stderr=DEVNULL)

def playdvd():
    path = "/media/" + getlogin()
    with scandir(path) as it:
        for entry in it:
            if not entry.name.startswith('.') and entry.is_dir():
                dvd_path = path + '/' + entry.name
                if isdir(dvd_path + '/' + "VIDEO_TS"):
                    display_file(displayRules["*video"], dvd_path)
                    return True
    return False

if len(argv) <= 1:
    print("Missing filename command line argument.")
    exit(1)
filename = " ".join(argv[1:])
if filename == "dvd":
    if playdvd():
        exit(0)
if isdir(filename):
    print("Content of directory " + filename + ":\n")
    display_file("ls -l", filename)
    exit(0)
elif not isfile(filename):
    print("File", filename, "does not exist.")
    exit(1)
elif not access(filename, R_OK):
    print("File", filename, "is not readable.")
    exit(1)
extension = splitext(filename)[1][1:].lower()
if len(extension) == 0:
    if is_textfile(filename):
        display_file("less", filename)
    else:
        print("Filename", filename, "without extension, no rule for displaying.")
        exit(1)
elif extension in displayRules:
    command = displayRules[extension]
    if command.startswith("*"):
        command = displayRules[command]
    if command.startswith("%"):
        command = command[1:]
        print("Content list for", filename)
        print()
    if command:
        display_file(command, filename)
    else:
        print("Internal error, missing command to extension", extension)
        exit(2)
else:
    if is_textfile(filename):
        display_file("less", filename)
    else:
        print("No rule for extension", extension, "to display", filename)
        exit(1)
